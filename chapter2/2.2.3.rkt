#lang scheme
(define square (lambda (x) (* x x)))
(define (sum-odd-squares tree)
  (cond ((null? tree) 0)
        ((not (pair? tree))
         (if (odd? tree)
             (square tree)
             0))
        (else (+ (sum-odd-squares (car tree))
                 (sum-odd-squares (cdr tree))))))

(define (fib k)
  (define (fib-inner a b counter)
    (if (= counter 0)
        a
        (fib-inner b (+ a b) (- counter 1))))
  (fib-inner 0 1 k))
 
(define (even-fibs n)
  (define (next k)
    (if (> k n)
        '()
        (let ([f (fib k)])
          (if (even? f)
              (cons f (next (+ k 1)))
              (next (+ k 1))))))
  (next 0))

(define (filter predicate sequence)
  (cond ((null? sequence) '())
        ((predicate (car sequence))
         (cons (car sequence)
               (filter predicate (cdr sequence))))
        (else (filter predicate (cdr sequence)))))